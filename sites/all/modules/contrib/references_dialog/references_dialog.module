<?php

/**
 * @file
 * This the main module file.
 */

/**
 * Implements hook_element_info_alter().
 * Add #after_builds to widgets that needs them.
 */
function references_dialog_element_info_alter(&$info) {
  foreach (references_dialog_widgets() as $widget) {
    // If this element type is specified as a type that a widget should be
    // attached to, go ahead and make it so.
    if (isset($info[$widget['element_type']])) {
      $info[$widget['element_type']]['#after_build'][] = 'references_dialog_process_widget';
    }
  }
}

/**
 * Implements hook_menu().
 */
function references_dialog_menu() {
  $items = array();
  // This redirect callback is used when adding and editing content in
  // the overlay. When content is created or edited, we are directed here,
  // so we can act properly on entities.
  $items['references-dialog/redirect/%/%'] = array(
    'page callback' => 'references_dialog_redirect_page',
    'page arguments' => array(2,3),
    'access callback' => 'references_dialog_redirect_access',
    'access arguments' => array(2,3),
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function references_dialog_admin_paths() {
  // We only activate admin theme if we use the admin theme
  // when editing nodes.
  if (variable_get('node_admin_theme', FALSE)) {
    return array('references-dialog/search/*' => TRUE);
  }
}

/**
 * Get search views attached to a particular field instance.
 * @param array instance a field instance.
 */
function references_dialog_get_search_views($instance) {
  $search_views = array();
  // Get all views that has a references_dialog display.
  $results = views_get_applicable_views('references_dialog display');
  foreach ($results as $result) {
    list($view, $display) = $result;
    if (is_object($view)) {
      $instances = $view->display_handler->get_option('field_instances');
      foreach ($instances as $view_instance) {
        list($entity_type, $field_name, $bundle) = explode(':', $view_instance);
        if ($instance['entity_type'] == $entity_type && $instance['field_name'] == $field_name && $instance['bundle'] == $instance['bundle']) {
          $search_views[$view->name] = $view;
        }
      }
    }
  }
  return $search_views;
}

/**
 * Implements hook_widget_info_alter().
 * Adds settings that we need to declare to widgets we are extending.
 */
function references_dialog_field_widget_info_alter(&$info) {
  foreach (references_dialog_widgets() as $widget_name => $widget_info) {
    if (isset($info[$widget_name]['settings'])) {
      foreach (array_keys($widget_info['operations']) as $operation) {
        $info[$widget_name]['settings']['references_dialog_' . $operation] = 0;
        // Add search view setting if we have search.
        if ($operation == 'search') {
          $info[$widget_name]['settings']['references_dialog_search_view'] = '';
        }
      }
    }
  }
}

/**
 * Get instances appropriate for a search view on a particular entity type.
 * @param string $entity_type name of the entity type.
 * @return an array of appropriate instances.
 */
function references_dialog_get_search_view_instances($entity_type = FALSE) {
  if ($entity_type) {
    return _references_dialog_get_entity_instances($entity_type);
  }
  else {
    $types = entity_get_info();
    $instances = array();
    foreach (array_keys($types) as $type) {
      _references_dialog_get_entity_instances($type, $instances);
    }
    return $instances;
  }
}

/**
 * Get all search view fields matching an entity.
 * @param string $entity_type the entity type.
 * @return array
 *   an array of instances.
 */
function _references_dialog_get_entity_instances($entity_type, &$applicable_instances) {
  $fields = field_info_fields();
  $widgets = field_info_widget_types();
  $dialog_widgets = references_dialog_widgets();
  foreach ($fields as $field_name => $field) {
    foreach ($field['bundles'][$entity_type] as $bundle_name)  {
      $instance = field_info_instance($entity_type, $field_name, $bundle_name);
      if (in_array($instance['widget']['type'], array_keys($dialog_widgets)) && $instance['widget']['settings']['references_dialog_search']) {
        $applicable_instances[] = $instance;
      }
    }
  }
  return $applicable_instances;
}

/**
 * Return an array of supported widgets.
 */
function references_dialog_widgets() {
  return module_invoke_all('references_dialog_widgets');
}

/**
 * Load a particular widget.
 * @param string $widget the name of the widget.
 * @return array the widget definition.
 */
function references_dialog_widget_load($widget) {
  $widgets = references_dialog_widgets();
  return $widgets[$widget];
}

/**
 * Implements hook_form_alter().
 */
function references_dialog_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if (array_key_exists($form['instance']['widget']['type']['#value'], references_dialog_widgets())) {
    $field = $form['#field'];
    $instance = field_info_instance($form['instance']['entity_type']['#value'], $form['instance']['field_name']['#value'], $form['instance']['bundle']['#value']);
    $form['instance']['widget']['settings'] += references_dialog_settings_form($field, $instance);
  }
}

/**
 * A widget settings form for our references dialog fields.
 */
function references_dialog_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);
  $dialog_widget = references_dialog_widget_load($widget['type']);
  // Add our own additions.
  foreach ($dialog_widget['operations'] as $operation => $dialog_settings) {
    $form['references_dialog_' . $operation] = array(
      '#type' => 'checkbox',
      '#title' => $dialog_settings['title'],
      '#default_value' => $settings['references_dialog_' . $operation],
    );
  }
  return $form;
}

/**
 * Menu access checker for references_dialog
 */
function references_dialog_search_access($entity_type, $field_name, $bundle_name) {
  return TRUE;
}

/**
 * Add our references dialog fields to the existing element
 */
function references_dialog_process_widget(&$element) {
  if (!isset($element['#entity_type'])) {
    return $element;
  }
  $item = $element['#value'];
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  $widget_settings = $instance['widget']['settings'];
  $widget_type = $instance['widget']['type'];
  $widgets = references_dialog_widgets();
  // Bail if we don't have anything to do here.
  if (!in_array($widget_type, array_keys($widgets))) {
    return $element;
  }
  $dialog_widget = references_dialog_widget_load($widget_type);
  // Attach javascript and CSS needed.
  $element['#attached']['js'] = array(drupal_get_path('module', 'references_dialog') . '/js/references-dialog.js');
  $element['#attached']['css'] = array(drupal_get_path('module', 'references_dialog') . '/css/references-dialog-admin.css');
  $element['#attached']['library'][] = array('system', 'ui.dialog');
  $element['#attached']['js'][] = array(
    'data' => array(
      'ReferencesDialog' => array(
        'fields' => array(
          $element['#id'] => array(
            'format' => $dialog_widget['format'],
          ),
        ),
      ),
    ),
    'type' => 'setting',
  );
  $link_options = array('attributes' => array('class' => array('references-dialog-activate')));
  $dialog_links = array();
  foreach ($dialog_widget['operations'] as $operation => $settings) {
    if (isset($widget_settings['references_dialog_' . $operation]) && $widget_settings['references_dialog_' . $operation]) {
      $links = $settings['function']($element, $widget_settings, $field, $instance);
      foreach ($links as $link) {
        $link += $link_options;
        $link['attributes']['class'][] = $operation . '-dialog';
        $dialog_links[] = $link;
      }
    }
  }
  if (count($dialog_links)) {
    // We add a div directly into the markup here since we really need it in order
    // to make sure the javascript works.
    $element['#suffix'] = '<div class="dialog-links ' . $element['#id'] . '">' . theme('references_dialog_links', $dialog_links) . '</div>';
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function references_dialog_theme() {
  return array(
    'references_dialog_page' => array(
      'render element' => 'page',
      'template' => 'references-dialog-page',
    ),
    'references_dialog_links' => array(
      'variables' => array('links' => null),
    ),
  );
}

/**
 * Implements hook_entity_insert().
 */
function references_dialog_entity_insert($entity, $entity_type) {
  // If we are in a dialog, we want to make sure that we redirect to the
  // the close dialog page, so that the dialog may be closed.
  if (references_dialog_in_dialog() && references_dialog_close_on_submit()) {
    references_dialog_close_on_redirect($entity, $entity_type);
  }
}

/**
 * Implements hook_entity_update().
 */
function references_dialog_entity_update($entity, $entity_type) {
  if (references_dialog_in_dialog() && references_dialog_close_on_submit()) {
    references_dialog_close_on_redirect($entity, $entity_type);
  }
}

/**
 * Sets our destination parameter so that the dialog will close itself after
 * redirect is completed.
 */
function references_dialog_close_on_redirect($entity, $entity_type) {
  $entity_info = entity_get_info($entity_type);
  // We use $_GET['destination'] since that overrides anything that happens
  // in the form. It is a hack, but it is very effective, since we don't have
  // to be worried about getting overrun by other form submit handlers.
  $_GET['destination'] = 'references-dialog/redirect/' .
  $entity->{$entity_info['entity keys']['id']} . '/' .
  $entity_type .
  '?references-dialog-close=1&render=references-dialog';
}

/**
 * Implements hook_init().
 */
function references_dialog_init() {
  if (references_dialog_in_dialog()) {
    module_invoke_all('suppress');
    drupal_add_css(drupal_get_path('module', 'references_dialog') . '/css/references-dialog-search.css');
  }
}

/**
 * Menu callback for fetching a search view.
 * @param $view_name a view to use.
 * @param $display_name the display name.
 * @param $instance_info information aboutythe current display in a packed form.
 */
function references_dialog_search_view($view_name, $display_name, $instance_info) {
  $args = func_get_args();
  $args = array_splice($args, 2);
  list($entity_type, $field_name, $bundle_name) = explode(':', $instance_info);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  $field_info = field_info_field($field_name);
  if ($instance && $instance['widget']['settings']['references_dialog_search']) {
    $view = views_get_view($view_name);
    // Add some nice data about our field that the display handler can use.
    $view->references_dialog = array(
      'instance' => $instance,
      'field' => $field_info,
    );
    return $view->execute_display($display_name, $args);
  }
  else {
    return drupal_not_found();
  }
}

/**
 * Implements hook_hook_info().
 */
function references_dialog_hook_info() {
  $hooks = array();
  $hooks['references_dialog_widgets'] = array(
    'group' => 'dialog_widgets',
  );
  return $hooks;
}

/**
 * Get all views search links for an instance.
 * This function should be used by referencesw dialog widgets that uses
 * views for it's search functionality.
 * @param type $instance
 */
function references_dialog_get_views_search_links($element, $widget_settings, $field, $instance) {
  $applicable_views = references_dialog_get_search_views($instance);
  $links = array();
  // We pack the necessary information for getting a field instance together in the
  // url, so that we can retrieve the field instance and attach it to the view
  // later on.
  $instance_info = implode(':', array($instance['entity_type'], $instance['field_name'], $instance['bundle']));
  foreach ($applicable_views as $view_name => $view) {
    $links[] = array(
      'title' => t('Search'),
      'href' => 'references-dialog/search/' . $view_name . '/' .
         $view->current_display . '/' .
         $instance_info,
    );
  }
  return $links;
}

/**
 * Implements hook_page_alter().
 */
function references_dialog_page_alter(&$page) {
  if (references_dialog_in_dialog()) {
    $page['#theme'] = 'references_dialog_page';
  }
}

/**
 * Check if we are in a references dialog.
 * @return boolean if we are in a dialog.
 */
function references_dialog_in_dialog() {
  return (isset($_GET['render']) && $_GET['render'] == 'references-dialog') ||
  // We are always in a dialog if we are on a references dialog search page,
  // otherwise we will have a hard time with views exposed filters.
  strstr(current_path(), 'references-dialog/search') !== FALSE;
}

/**
 * Check if we should close the dialog upon submition.
 */
function references_dialog_close_on_submit() {
  return (!isset($_GET['closeonsubmit']) || $_GET['closeonsubmit']);
}

/**
 * Implements of hook_views_api().
 */
function references_dialog_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'reference_dialog') . '/views',
  );
}

/**
 * Implements of hook_views_plugins().
 */
function references_dialog_views_plugins() {
  return array(
    'display' => array(
      'references_dialog' => array(
        'title' => t('Reference Dialog Search'),
        'admin' => t('References'),
        'theme' => 'views_view',
        'help' => t('A view that can be used when referencing content.'),
        'handler' => 'references_dialog_plugin_display',
        'use ajax' => TRUE,
        'use pager' => TRUE,
        'uses hook menu' => TRUE,
        'help topic' => 'references-dialog',
        'references_dialog display' => TRUE,
        'path' => drupal_get_path('module', 'references_dialog') . '/views',
      ),
    ),
  );
}

function references_dialog_redirect_access() {
  // @todo It is not really a security issue, but we should probably check
  // that you can create the content you just created (silly), to access
  // this page.
  return TRUE;
}

/**
 * Page callback for our redirect page.
 */
function references_dialog_redirect_page($entity_id, $entity_type) {
  // Get some information about the entity we are dealing with.
  $entity = reset(entity_load($entity_type, array($entity_id)));
  $entity_info = entity_get_info($entity_type);
  $entity_id = $entity->{$entity_info['entity keys']['id']};
  // Get the entity title, by using the callback if it is defined.
  if (isset($entity_info['label callback'])) {
    $entity_title = $entity_info['label callback']($entity);
  }
  else {
    $entity_title = $entity->{$entity_info['entity keys']['label']};
  }
  // Add appropriate javascript that will be used by the parent page to
  // fill in the required data.
  if (isset($entity_id) && references_dialog_in_dialog() && isset($_GET['references-dialog-close'])) {
    drupal_add_js(drupal_get_path('module', 'references_dialog') . '/js/references-dialog-child.js');
    drupal_add_js(array(
      'ReferencesDialog' => array(
        'entity_id' => $entity_id,
        'title' => $entity_title,
      ),
    ), 'setting');
  }
  return '';
}

/**
 * Theme function for theming the links for opening
 * the references dialog.
 */
function theme_references_dialog_links($links) {
  return theme('links', array('links' => $links, 'attributes' => array('class' => 'references-dialog-links')));
}
