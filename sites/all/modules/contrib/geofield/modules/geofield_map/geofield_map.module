<?php

/**
 * Implements hook_views_api().
 */
 
function geofield_map_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'geofield_map') . '/includes',
  );
}

/**
 * Implements hook_field_formatter_info().
 */
 
function geofield_map_field_formatter_info() {
  return array(
    'geofield_map_map' => array(
      'label' => t('Geofield Map'),
      'field types' => array('geofield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */

function geofield_map_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  $raw_data = array();

  foreach ($items as $item) {
    $raw_data[] = array(
      'geo' => $item,
      'options' => array(),
    );
  }

  $js_settings = array(
    $entity->nid => array(
      'map_id' => 'geofield_map_entity_' . $entity->nid,
      'data' => geofield_map_process_points($raw_data),
    ),
  );

  drupal_add_js('http://maps.googleapis.com/maps/api/js?sensor=false', 'external');
  drupal_add_js(drupal_get_path('module', 'geofield_map') . '/js/geofield_map.js');
  drupal_add_js(array('geofieldMap' => $js_settings), 'setting');
      
  $element[0]['#markup'] = '<div style="width: 100%; height: 300px" id="geofield_map_entity_' . $entity->nid . '" class="geofieldMap">Test</div>';

  return $element;
}

/**
 * Processes a series of points.
 *
 * $datum = array(
 *   'geo' => (geom_field),
 *   'options' => array(
 *     'title' => 'title text',
 *     'description' => 'popup text',
 *   ),
 * );
 */

function geofield_map_process_points($items = array()) {
  $data = array();

  geofield_load_geophp();

  foreach ($items as $delta => $item) {
    switch ($item['geo']['geo_type']) {
      case 'point':
        $datum = array(
          'type' => 'point',
          'points' => array(
            array(
              'lat' => $item['geo']['lat'],
              'lon' => $item['geo']['lon'],
            ),
          ),
        );

        if (!empty($item['options']['description'])) {
          $datum['points'][0]['text'] = $item['options']['description'];
        }

        $data[] = $datum;
      break;
      case 'linestring':
        $geom = geoPHP::load($item['geo']['wkt'], 'wkt');
        $components = $geom->getComponents();

        $datum = array(
          'type' => $item['geo']['geo_type'],
          'points' => array()
        );

        foreach ($components as $component) {
          $datum['points'][] = array(
            'lat' => $component->getY(),
            'lon' => $component->getX(),
          );
        }

        $data[] = $datum;
      break;
      case 'polygon':
        $geom = geoPHP::load($item['geo']['wkt'], 'wkt');
        $tmp = $geom->getComponents();
        $components = $tmp[0]->getComponents();

        $datum = array(
          'type' => $item['geo']['geo_type'],
          'points' => array()
        );

        foreach ($components as $component) {
          $datum['points'][] = array(
            'lat' => $component->getY(),
            'lon' => $component->getX(),
          );
        }

        $data[] = $datum;
      break;
    }
  }

  return $data;
}
