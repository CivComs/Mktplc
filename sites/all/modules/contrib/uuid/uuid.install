<?php

/**
 * @file
 * Install, update and uninstall functions for the uuid module.
 */

define('UUID_UPGRADE_VAR', 'uuid_upgrade_in_progress');

// Include UUID schema helper functions.
module_load_include('inc', 'uuid', 'uuid.schema');

/**
 * Implements of hook_schema_alter().
 */
function uuid_schema_alter(&$schema = array()) {
  // We aren't calling entity_get_info() directly here becase it's caching too
  // hard and can't be used inside hook_schema_alter(). Also, we are only using
  // a fraction of what we original logic fetches and we don't need the fancy
  // logic for default values since it's a prerequsite that
  // $info['entity keys']['uuid'] is set for the alteration to kick in.
  $entity_info = module_invoke_all('entity_info');
  drupal_alter('entity_info', $entity_info);

  foreach ($entity_info as $entity_type => $info) {
    if (isset($info['uuid']) && $info['uuid'] == TRUE && !empty($info['entity keys']['uuid'])) {
      // Add the Universally Unique Identifier column to the definition.
      uuid_schema_generate($schema, $info['base table'], $info['entity keys']['uuid']);
      if (!empty($info['revision table']) && !empty($info['entity keys']['revision uuid'])) {
        // Add the Universally Unique Version Identifier to the definition.
        uuid_schema_generate($schema, $info['revision table'], $info['entity keys']['revision uuid']);
      }
    }
  }
}

/**
 * Implements hook_install().
 */
function uuid_install() {
  foreach (entity_get_info() as $entity_type => $info) {
    if (isset($info['uuid']) && $info['uuid'] == TRUE) {
      $schema = array();
      // Add the UUID columns to the definition.
      uuid_schema_alter($schema);
      // Now drop the actual UUID field.
      uuid_add_field($schema, $info['base table']);
      if (!empty($info['revision table'])) {
        // Now drop the actual UUVID field.
        uuid_add_field($schema, $info['revision table']);
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function uuid_uninstall() {
  variable_del('uuid_generator');
  foreach (entity_get_info() as $entity_type => $info) {
    if (isset($info['uuid']) && $info['uuid'] == TRUE) {
      $schema = array();
      // Add the UUID columns to the definition.
      uuid_schema_alter($schema);
      // Now drop the actual UUID field.
      uuid_add_field($schema, $info['base table']);
      if (!empty($info['revision table'])) {
        // Now drop the actual UUVID field.
        uuid_add_field($schema, $info['revision table']);
      }
    }
  }
}

/**
 * Create uuid_vocabulary and uuid_term_data tables.
 */
function uuid_update_6001() {
  $ret = array();

  db_create_table($ret, 'uuid_vocabulary', uuid_table_schema('vocabulary', 'vid'));
  db_create_table($ret, 'uuid_term_data', uuid_table_schema('term_data', 'tid'));

  return $ret;
}

/**
 * For each of out tables, drop the indexe on the UUID column and add a unique
 * key on that column.
 */
function uuid_update_6002() {
  $ret = array();

  foreach (uuid_schema() as $table => $schema) {
    db_drop_index($ret, $table, $table . '_uuid_idx');
    db_add_unique_key($ret, $table, $table . '_uuid_key', array('uuid'));
  }

  return $ret;
}

/**
 * Create uuid_comment table.
 */
function uuid_update_6003() {
  $ret = array();

  db_create_table($ret, 'uuid_comments', uuid_table_schema('comments', 'cid'));

  return $ret;
}

/**
 * Fix the column definitions for uuid columns in all tables
 * to use the more efficient char spec.
 */
function uuid_update_6004() {
  $ret = array();

  // Use what's in uuid_table_schema in order to be consistent.
  $tables = uuid_schema();
  $spec = $tables['uuid_node']['fields']['uuid'];

  foreach ($tables as $tablename => $schema) {
    if (db_table_exists($tablename)) {
      db_change_field($ret, $tablename, 'uuid', 'uuid', $spec);
    }
  }

  return $ret;
}

/**
 * Modify existing uuid_node_revisions table to support revision deletion, and
 * add in as much legacy data as possible.
 */
function uuid_update_6005() {
  $ret = array();

  if (db_table_exists('uuid_node_revisions')) {
    // Use what's already defined in uuid schema in order to be consistent.
    $schema = uuid_schema();
    $spec = $schema['uuid_node_revisions']['fields']['nid'];
    db_add_field($ret, 'uuid_node_revisions', 'nid', $spec);
    // Add node ids to the new column, for revisions that exist, but now have a
    // default value of 0 in uuid_node_revisions.
    $result = db_query('SELECT nr.nid, nr.vid FROM {node_revisions} AS nr LEFT JOIN {uuid_node_revisions} AS unr ON unr.vid=nr.vid WHERE unr.nid=%d', 0);
    while ($item = db_fetch_object($result)) {
      $ret[] = update_sql('UPDATE {uuid_node_revisions} SET nid=' . (int) $item->nid . ' WHERE vid=' . (int) $item->vid);
    }
    // Add uuid_node_revision rows for rows that don't exist, but should.
    $result = db_query('SELECT nr.nid, nr.vid FROM {node_revisions} AS nr LEFT JOIN {uuid_node_revisions} AS unr ON unr.vid=nr.vid WHERE unr.nid IS NULL');
    while ($item = db_fetch_object($result)) {
      $ret[] = update_sql(sprintf("INSERT INTO {uuid_node_revisions} (vid, uuid, nid) VALUES(%d, '%s', %d)", $item->vid, uuid_uuid(), $item->nid));
    }
    // Delete any orphaned revision vid, uuid pairs.
    $ret[] = update_sql('DELETE FROM {uuid_node_revisions} WHERE nid=0');
  }

  return $ret;
}

/**
 * Remove old variables.
 */
function uuid_update_7100() {
  $types = array(
    'nodes',
    'users',
    'taxonomy',
    'comments',
  );
  foreach ($types as $type) {
    variable_del('uuid_automatic_for_' . $type);
  }
  return array();
}

/**
 * Clear cache for installations that used alpha1. Modules that previously was
 * enabled in uuid_update_7100() doesn't exist anymore.
 */
function uuid_update_7101() {
  drupal_flush_all_caches();
}
