<?php
/**
 * @file
 * Main Drupal module file for the OpenLayers UI module
 *
 * @ingroup openlayers
 */

/**
 * Implements hook_init
 */
function openlayers_init() {
  // For backwards compability for the change from maps to presets
  // in the 7.x-2.x version, we want to make it really obvious that
  // administrators and developers should be updating their maps
  //
  // There are also other requirement checks like the compatible
  // suggestlibrary version.
  if (strpos($_GET['q'], 'admin/structure/openlayers') === 0) {
    include_once DRUPAL_ROOT . '/includes/install.inc';
    drupal_load_updates();
    module_load_include('install', 'openlayers', 'openlayers');
    $reqs = openlayers_requirements('runtime');
    foreach ($reqs as $r) {
      if ($r['severity'] != REQUIREMENT_OK) {
        $severity = $r['severity'] == REQUIREMENT_WARNING ? 'warning' : 'error';
        drupal_set_message(t('<strong>!title</strong> !message', array(
          '!title' => $r['value'],
          '!message' => isset($r['description']) ? $r['description'] : '',
          )), $severity);
      }
    }
    
    // We also want to do some nice AJAX magic to get the library
    // version to the system.
    $check = variable_get('openlayers_ui_version_check', '');
    if (empty($check)) {
      // Load AJAX libraries
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_library('system', 'jquery.form');
      // Ensure that the library is included
      openlayers_include();
      // Add custom client JS
      drupal_add_js(drupal_get_path('module', 'openlayers_ui') . '/js/openlayers_ui.admin.js');
      // We shouldn't, but we are just gonna put a message up there
      // to get replaced.
      drupal_set_message('<div class="openlayers-ui-version-check-message">' . 
        t('Checking client library via Javascript...') . '</div>', 'none');
    }
  }
}

/**
 * Implements hook_help
 */
function openlayers_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers_ui':
      return '<p>'. t('Provides a user interface to manage OpenLayers maps.') .'</p>';
    case 'admin/structure/openlayers':
      return '<p>'. t('Configure where Drupal finds 
        the OpenLayers javascript library. Using a local or <a href="@olb">compacted 
        version</a> of OpenLayers can reduce filesize, but remember to set the Image Path and 
        CSS Path options in every map, because OpenLayers is not able to find these resources 
        automatically. See the included documentation in /doc for 
        more details.',
        array('@olb' => 'http://trac.openlayers.org/wiki/Profiles')) .'</p>';
    case 'admin/structure/openlayers/styles':
      return '<p>'. t('OpenLayer styles are stored versions of 
        <a href="@ols">javascript StyleMap objects</a>, but are much easier to 
        configure through an interface. Styles will typically define the icon, 
        fill color, border, and radius of points or polygons, so they are used 
        on overlays more often than base layers, which are not affected by vector 
        styles.', array("@ols" => 'http://trac.openlayers.org/wiki/Styles')) .'</p>';
    case 'admin/structure/openlayers/styles/add':
      return '<p>'. t('The name, title, and description you give a style is for Drupal\'s 
        interal storage. The rest of the properties are documented on openlayers.org')
        . '</p>';
    case 'admin/structure/openlayers/maps':
      return '<p>'. t('Maps are combinations of the layers, styles, and behaviors 
        which constitute maps. They also contain basic configuration like the 
        width and centerpoint of the map - everything except for a mechanism 
        to put a map on a page. For that, use the Views OpenLayers Map style.') .'</p>';
    case 'admin/structure/openlayers/layers':
      return '<p>'. t('Layers are stored versions of javascript OpenLayers layer 
        objects. They point at a data source, like OpenStreetMap, Google Maps, 
        or Drupal itself, and sometimes define the zoom levels for which they apply.') .'</p>';
    case 'admin/structure/openlayers/layers/settings':
      return '<p>'. t('Commercial layer providers like Google will require API keys 
        to ensure that users are\'t abusing the service and to enforce limits. Not all 
        of these keys are required, of course, only those that are used on a site.') .'</p>';

  }
}

/**
 * Implements hook_permission().
 */
function openlayers_ui_permission() {
  return array(
    'administer openlayers' => array(
      'title' => t('Administer OpenLayers'),
      'description' => t('Configure OpenLayers settings, styles, maps, and layers.'),
    ),
  );
}

/**
 * Implements hook_menu
 */
function openlayers_ui_menu() {
  $items = array();

  // Core OpenLayers settings pages.
  $items['admin/structure/openlayers'] = array(
    'title' => 'OpenLayers',
    'description' => 'Manage maps, layers, styles, and map behaviors.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_admin_settings'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/structure/openlayers/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  // Layers.
  $items['admin/structure/openlayers/layers'] = array(
    'title' => 'Layers',
    'page callback' => 'openlayers_ui_object_list',
    'page arguments' => array(3),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/openlayers/layers/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  // Layer type drilldown
  $items['admin/structure/openlayers/layers/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_layers_types'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  // Actual add-layer form
  $items['admin/structure/openlayers/layers/add/%openlayers_layer_type'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_layers_form', 5),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -15,
  );
  $items['admin/structure/openlayers/layers/clone/%openlayers_layer'] = array( 
    'title' => 'Clone layer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_layers_form', 5),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_NORMAL_ITEM,
    'tab_parent' => 'admin/structure/openlayers/layers',
  );
  // Edit-layer form
  $items['admin/structure/openlayers/layers/%openlayers_layer/edit'] = array(
    'title' => 'Edit layer',
    'description' => 'Edit OpenLayers layer.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_layers_form', 4),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_LOCAL_TASK,
    'tab_parent' => 'admin/structure/openlayers/layers',
  );
  $items['admin/structure/openlayers/layers/%openlayers_layer_export/delete'] = array(
    'title' => 'Delete layer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_object_delete', 3, 4),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/structure/openlayers/layers/%openlayers_layer_export/export'] = array(
    'title' => 'Export layer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_object_export', 3, 4),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_NORMAL_ITEM
  );
  // Layer-type-wide settings form
  $items['admin/structure/openlayers/layers/settings'] = array(
    'title' => 'API Keys',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_layers_settings'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.layers.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  // Styles.
  $items['admin/structure/openlayers/styles'] = array(
    'title' => 'Styles',
    'page callback' => 'openlayers_ui_object_list',
    'page arguments' => array(3),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.styles.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/openlayers/styles/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/structure/openlayers/styles/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_styles_form'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.styles.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/openlayers/styles/add/%openlayers_style'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_styles_form', 5),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.styles.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
  );
  $items['admin/structure/openlayers/styles/clone/%openlayers_style'] = array(
    'title' => 'Clone style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_styles_form', 5),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.styles.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/openlayers/styles/%openlayers_style/edit'] = array(
    'title' => 'Edit style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_styles_form', 4, TRUE),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.styles.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/structure/openlayers/styles/%openlayers_style/delete'] = array(
    'title' => 'Delete style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_object_delete', 3, 4),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.styles.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/structure/openlayers/styles/%openlayers_style/export'] = array(
    'title' => 'Export style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_object_export', 3, 4),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.styles.inc',
    'type' => MENU_LOCAL_TASK
  );

  // Maps.
  $items['admin/structure/openlayers/maps'] = array(
    'title' => 'Maps',
    'description' => 'Create OpenLayers maps.',
    'page callback' => 'openlayers_ui_object_list',
    'page arguments' => array(3),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.maps.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/structure/openlayers/maps/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/structure/openlayers/maps/add'] = array(
    'title' => 'Add',
    'description' => 'Add OpenLayers maps.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_maps_form'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.maps.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/openlayers/maps/add/%openlayers_map'] = array(
    'title' => 'Clone Map',
    'description' => 'Add OpenLayers maps.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_maps_form', 5),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.maps.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
  );
  $items['admin/structure/openlayers/maps/clone/%openlayers_map'] = array(
    'title' => 'Clone Map',
    'description' => 'Clone OpenLayers maps.',
    'page callback' => 'openlayers_ui_maps_clone',
    'page arguments' => array(5),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.maps.inc',
    'type' => MENU_LOCAL_TASK, 
  );
  $items['admin/structure/openlayers/maps/%openlayers_map/edit'] = array(
    'title' => 'Edit map',
    'description' => 'Edit OpenLayers maps.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_maps_form', 4, TRUE),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.maps.inc',
    'type' => MENU_LOCAL_TASK,
    'tab_parent' => 'admin/structure/openlayers/maps',
  );
  $items['admin/structure/openlayers/maps/%openlayers_map/delete'] = array(
    'title' => 'Delete map',
    'description' => 'Delete OpenLayers map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_object_delete', 3, 4),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.maps.inc',
    'type' => MENU_LOCAL_TASK,
    'tab_parent' => 'admin/structure/openlayers/maps',
  );
  $items['admin/structure/openlayers/maps/%openlayers_map/export'] = array(
    'title' => 'Export map',
    'description' => 'Export OpenLayers map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_ui_object_export', 3, 4),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.maps.inc',
    'type' => MENU_LOCAL_TASK,
    'tab_parent' => 'admin/structure/openlayers/maps',
  );
  $items['admin/structure/openlayers/callbacks/version_check/%'] = array(
    'title' => 'OpenLayers Version Check',
    'page callback' => 'openlayers_ui_version_check',
    'page arguments' => array(5),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers_ui.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function openlayers_ui_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_ui_form_layer_description' => array(
      'variables' => array(
        'layer_title' => '',
        'layer_description' => '',
      ),
      'file' => 'includes/openlayers_ui.theme.inc',
    ),
    'openlayers_ui_form_projection_description' => array(
      'variables' => array(
        'projection_title' => '',
        'available_layers' => array(),
        'layers' => array(),
      ),
      'file' => 'includes/openlayers_ui.theme.inc',
    ),
    'openlayers_ui_maps_form' => array(
      'render element' => 'elements',
      'file' => 'includes/openlayers_ui.theme.inc',
    ),
    'openlayers_ui_maps_form_layers' => array(
      'render element' => 'elements',
      'file' => 'includes/openlayers_ui.theme.inc',
    ),
    'openlayers_ui_maps_form_behaviors' => array(
      'render element' => 'elements',
      'file' => 'includes/openlayers_ui.theme.inc',
    ),
  );
}

/**
 * Menu callback for Layers.
 */
function openlayers_ui_object_list($type) {
  $rows = array();

  switch ($type) {
    case 'styles':
      $header = array(t('Preview'), t('Title'), t('Description'), t('Actions'));
      $objects = openlayers_styles(TRUE);
      break;
      
    case 'layers':
      $header = array(t('Title'), t('Type'), t('Description'), t('Actions'));
      $layer_types = openlayers_layer_types();
      $objects = openlayers_layers_load(TRUE);
      break;
      
    case 'maps':
      $header = array(t('Title'), t('Layers'), t('Description'), t('Actions'));
      $layers = openlayers_layers_load();
      $objects = openlayers_maps(TRUE);
      break;
  }

  // Create table rows
  foreach ($objects as $object) {
    $row = array();
    $links = array();
    
    // Any pre-title cells.
    switch ($type) {
      case 'styles':
      	// Add the icon as an image in the row if it exists.
        if (isset($object->data['externalGraphic'])) {
          $row[] = theme('image', array('path' => $object->data['externalGraphic']));
      	}
      	else {
      	  $row[] = openlayers_ui_style_preview($object);
      	}
        break;
      
      default:
      	break;
    }
    
    // Check map type and create links accordingly.
    $links[] = l(t('Export'), "admin/structure/openlayers/{$type}/{$object->name}/export");
    $links[] = l(t('Clone'), "admin/structure/openlayers/{$type}/clone/{$object->name}");
    
    switch ($object->export_type) {
      case (EXPORT_IN_DATABASE | EXPORT_IN_CODE):
        $row[] = $object->title .' <em><small>(' . t('Overridden') . ')</small></em>';
        $links[] = l(t('Edit'), "admin/structure/openlayers/{$type}/{$object->name}/edit");
        $links[] = l(t('Revert'), "admin/structure/openlayers/{$type}/{$object->name}/delete");
        break;

      case EXPORT_IN_DATABASE:
        $links[] = l(t('Edit'), "admin/structure/openlayers/{$type}/{$object->name}/edit");
        $links[] = l(t('Delete'), "admin/structure/openlayers/{$type}/{$object->name}/delete");
      	$row[] = $object->title .' <em><small>(' . t('Normal') . ')</small></em>';
        break;

      case EXPORT_IN_CODE:
        $row[] = $object->title .' <em><small>(' . t('Default') . ')</small></em>';
        break;
    }

    // Post title rows.
    switch ($type) {
      case 'layers':
        $row[] = $layer_types[$object->data['layer_type']]['title'];
      	break;

      case 'maps':
        if (!empty($object->data['layers'])) {
          $layer_names = array();
          foreach ($object->data['layers'] as $layer) {
            $layer_names[] = empty($layers[$layer]->title) ? $layer : $layers[$layer]->title;
          }
          $row[] = '<small>' . implode(', ', $layer_names) . '</small>';
        }
        break;
      
      default:
      	break;
    }

    // Add description and links.
    $row[] = $object->description;
    $row[] = implode(' | ', $links);
    $rows[] = $row;
  }

  // Output themed table
  $output = theme('table', array(
    'header' => $header, 
    'rows' => $rows)
  );
  return $output;
}

/**
 * Menu callback for object delete form.
 */
function openlayers_ui_object_delete($form_state, $args) {
  $type = $args['build_info']['args'][0];
  $object = $args['build_info']['args'][1];
  if ($object->export_type & EXPORT_IN_DATABASE) {
    // Create delete form
    $form = array(
      'type' => array('#type' => 'value', '#value' => $type),
      'object' => array('#type' => 'value', '#value' => $object),
    );
    $message = ($object->export_type & EXPORT_IN_CODE) ?
      t('Are you sure you want to revert %object?', array('%object' => $object->title)) :
      t('Are you sure you want to delete %object?', array('%object' => $object->title));
    return confirm_form($form, $message, 'admin/structure/openlayers/'. $type);
  }
}

/**
 * Form Submit Callback for Map Delete Form
 */
function openlayers_ui_object_delete_submit($form, &$form_state) {
  $type = $form_state['values']['type'];
  $object = $form_state['values']['object'];

  switch ($type) {
    case 'styles':
      $result = openlayers_style_delete($object);
      break;
      
    case 'layers':
      $result = openlayers_layer_delete($object);
      break;
      
    case 'maps':
      $result = openlayers_map_delete($object);
      break;
  }

  // Check query results
  if ($result) {
    drupal_set_message(t('%name was deleted.', array('%name' => $object->name)));
  }
  else {
    drupal_set_message(t('Error when attempting to delete %name.', array('%name' => $object->name)), 'error');
  }

  // Redirect
  $form_state['redirect'] = 'admin/structure/openlayers/'. $type;
}

/**
 * Menu callback for object export form.
 */
function openlayers_ui_object_export($form, $form_state, $type, $object) {
  drupal_set_title(t('OpenLayers @type export', array('@type' => ucwords($type))));

  // Determine type
  switch ($type) {
    case 'styles':
      $api = 'openlayers_styles';
      break;
      
    case 'layers':
      $api = 'openlayers_layers';
      break;
      
    case 'maps':
      $api = 'openlayers_maps';
      break;
  }
  
  // Use CTools to create export code
  ctools_include('export');
  $schema = ctools_export_get_schema($api);
  $identifier = $schema['export']['identifier'];
  $code = '$items = array();' ."\n";
  $code .= ctools_export_object($api, $object, '');
  $code .= '$items["'. $object->name .'"] = $' . $identifier . ';' ."\n";
  $code .= 'return $items;';
  $rows = substr_count($code, "\n") + 1;

  // Create form
  $form = array();
  $form['export'] = array(
    '#type' => 'textarea',
    '#default_value' => $code,
    '#rows' => $rows,
    '#resizable' => FALSE,
  );
  $form['done'] = array(
    '#type' => 'submit',
    '#value' => t('Done'),
  );
  $form['#redirect'] = 'admin/structure/openlayers/' . $type;

  return $form;
}

/**
 * Import a map from cut & paste
 */
function openlayers_ui_import_page(&$form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Map name'),
    '#description' => t('Enter the name to use for this map if it is different from the source map. Leave blank to use the name of the map.'),
  );

  $form['view'] = array(
    '#type' => 'textarea',
    '#title' => t('Paste map code here'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#submit' => array('openlayers_ui_import_submit'),
    '#validate' => array('openlayers_ui_import_validate'),
  );
  return $form;
}

/**
 * Validate handler to import a map
 */
function openlayers_ui_import_validate($form, &$form_state) {
  $view = '';
  ob_start();
  eval($form_state['values']['map']);
  ob_end_clean();

  if (!is_object($map)) {
    return form_error($form['view'], t('Unable to interpret map code.'));
  }

  // View name must be alphanumeric or underscores, no other punctuation.
  if (!empty($form_state['values']['name']) &&
    preg_match('/[^a-zA-Z0-9_]/', $form_state['values']['name'])) {
    form_error($form['name'], t('Map name must be alphanumeric or underscores only.'));
  }

  if ($form_state['values']['name']) {
    $map->name = $form_state['values']['name'];
  }

  $test = openlayers_map_load($map->name);
  if ($test && $test->type != t('Default')) {
    form_set_error('', t('A map by that name already exists; please choose a different name'));
  }

  // TODO: The import process should test layer existence

  $form_state['map'] = &$map;
}

/**
 * Get projection options.
 *
 * @return
 *   Array of projection options suitable for use in a FormAPI element.
 */
function openlayers_ui_get_projection_options() {
  $options = array();
  foreach (openlayers_layers_load() as $key => $layer) {
    if ($layer->data['projection']) {
      foreach ($layer->data['projection'] as $projection) {
        $options[$projection] = $projection;
      }
    }
  }
  return $options;
}

/**
 * Get layer options.
 */
function openlayers_ui_get_layer_options($type = 'baselayer',
  $projection = NULL) {
  $options = array();
  $layers = array();

  // Get layers in an array
  foreach (openlayers_layers_load() as $l) {
    $layers[$l->name] = openlayers_get_layer_object($l);
  }
  
  // Go through layers to theme output.
  foreach ($layers as $key => $layer) {
    // not filtering by projection
    // this layer has an appropriate projection
    // this layer can be reprojected because it is vector
    if (
      !isset($projection) || 
      in_array($projection, $layer->data['projection']) ||
      !empty($layer->data['vector'])
    ) {
      if ($type == 'baselayer' && $layer->data['baselayer']) {
        $options[$key] = theme('openlayers_ui_form_layer_description', 
          array(
            'layer_title' => $layer->title,
            'layer_description' => $layer->description));
      }
      elseif ($type != 'baselayer' && 
        empty($layer->data['baselayer'])) {
        $options[$key] = theme('openlayers_ui_form_layer_description', 
          array(
            'layer_title' => $layer->title,
            'layer_description' => $layer->description));
      }
    }
  }
  return $options;
}

/**
 * Get style options.
 *
 * @return
 *   Array of style options suitable for use in a FormAPI element.
 */
function openlayers_ui_get_style_options() {
  $options = array();
  foreach (openlayers_styles() as $key => $style) {
    $options[$key] = $style->title;
  }
  return $options;
}

/**
 * dependencies widget helper
 * @param $dependencies
 *  Array of Javascript dependencies as strings of function names
 * @return $form
 *  Form element of dependencies if any
 */
function openlayers_dependency_widget($dependencies) {
  if (is_array($dependencies) > 0) {
    $dependency_form = array();
    foreach ($dependencies as $dependency) {
      $dependency_form[] = array(
        '#markup' => "<div class='openlayers-dependency-flag'>"
            . "<span class='openlayers-dependency-value'>$dependency</span>"
            . "<span class='openlayers-dependency-broken'>"
            . t('Dependency not found:') . ' ' . $dependency . "</span>"
            . "</div>"
      );
    }
    return $dependency_form;
  }
}

/**
 * Create Style Preview
 *
 * Create a style preview given style object.
 */
function openlayers_ui_style_preview($style, $crosshairs = FALSE) {
  drupal_add_js(drupal_get_path('module', 'openlayers_ui') . '/js/openlayers_ui.styles.js');
  drupal_add_css(drupal_get_path('module', 'openlayers_ui') . '/openlayers_ui.css');
  module_load_include('inc', 'openlayers', 'includes/openlayers.render');
  openlayers_include();
  
  // Render style data
  $style->data = openlayers_render_style($style->data); 
  
  // Let's make a tiny map for a preview
  drupal_add_js(array('openlayers_ui' => 
    array(
      'style_preview' => array(
        $style->name => $style,
        $style->name . '_crosshairs' => $crosshairs,
      ),
    ),
  ), 'setting');
  
  // TODO: This should probably be in a theme function.
  return '<div id="' . $style->name . '"class="openlayers-ui-style-preview"></div>';
}