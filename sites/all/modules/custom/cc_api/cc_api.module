<?php
/**
 * @file
 * Main module file for the CC API module.
 * 
 * This module is aimed at providing a public
 * documenation page(s) for the implemented
 * Marketplace API.
 *
 * Also a set of tests specific to configured API.
 */

/**
 * Current API
 */
define('CC_API_CURRENT_API', 'mktplc_api_v1');

/**
 * Implements hook_help().
 */
function cc_api_help($path, $arg) {
  switch ($path) {
    // Main module help for the CC API module
    case 'admin/help#cc_api':
      return '<p>' . t('The CC API module provides more in-depth API documentation.') . '</p>';
  
  }
}

/**
 * Implements hook_menu().
 */
function cc_api_menu() {
  $path = variable_get('cc_api_doc_page_path', 'api');
  $items[$path] = array(
    'title' => variable_get('cc_api_doc_page_title', 'Marketplace API'), 
    'page callback' => 'cc_api_documentation_page', 
    'access arguments' => array('access content'), 
    'file' =>  'includes/cc_api.page.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/cc_api'] = array(
    'title' => 'Marketplace API', 
    'description' => 'Configure the marketplace API settings.',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('cc_api_admin_settings'), 
    'access arguments' => array('administer site configuration'), 
    'file' =>  'includes/cc_api.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
 
/**
 * Implements hook_block_info().
 */
function cc_api_block_info() {
  $blocks = array();

  // A Block to show an API call for
  // base objects
  $blocks['cc_api'] = array(
    'info' => t('CC API Block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cc_api_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'cc_api':
      $block['subject'] = '';
      $block['content'] = cc_api_block_output();
      break;
      
  }
  return $block;
}

/**
 * Block callback for CC API block.
 *
 * TODO: Make theme function.
 */
function cc_api_block_output() {
  $output = '';
  
  // Make sure the API is available
  if (!module_exists('cc_api_service')) {
    return $output;
  }
  
  $path = current_path();
  $link_options = array(
    'attributes' => array(
      'class' => array(
        'api-button',
        'add-button',
      ),
    ),
  );
  $link_title = t('API Object');
  
  // Try node first
  $node = menu_get_object();
  if (!empty($node)) {
    $base_url = cc_api_get_current_base_url();
    $link = l($link_title, $base_url . '/node/' . $node->nid . '.json', $link_options);
  }
  
  // Then try taxonomy term.  Views are overriding the
  // term pages, so we will check the path.
  $term = menu_get_object('taxonomy_term', 2);
  if (strpos($path, 'taxonomy/term/') === 0) {
    $term = taxonomy_term_load(str_replace('taxonomy/term/', '', $path));
  }
  if (!empty($term)) {
    $base_url = cc_api_get_current_base_url();
    $link = l($link_title, $base_url . '/taxonomy_term/' . $term->tid . '.json', $link_options);
  }
  
  if (isset($link)) {
    $output .= $link;
    $output .= '<p>';
    $output .= '
      ' . t('Click the API link to view the endpoint for this object.  Look at the <a href="@url">API documentation page</a> for more details.', array(
        '@url' => url(variable_get('cc_api_doc_page_path', 'api')),
      )) . '
    ';
    if ($example = variable_get('cc_api_doc_page_examples_path', 'api/examples')) {
      $output .= '
        ' . t('Or checkout the <a href="@url">examples page</a>.', array(
          '@url' => url($example),
        )) . '
      ';
    }
    $output .= '</p>';
  }
  return $output;
}

/**
 * Current current base URL for API
 */
function cc_api_get_current_base_url() {
  // This does not take into account aliases on methods.
  $endpoint = services_endpoint_load(CC_API_CURRENT_API);
  return url($endpoint->path, array('absolute' => TRUE));
}