<?php
/**
 * @file
 * The main module file for CC Interactions.
 *
 * This module aims to make the creation of Interactions,
 * a content type that ties together Apps and Organizations,
 * easier to create from either of the respective content
 * types.
 *
 * Note that the first iteration of this may be
 * pretty hackish.  Apologies up front.
 */

/**
 * Implements hook_init().
 */
function cc_interactions_init() {
if (isset($_GET['compact_overlay'])){
  if ($_GET['compact-overlay'] == true) {
    drupal_add_css(drupal_get_path('module', 'cc_interactions') . 
      '/css/cc_interactions.overlay.css');
  }
}
}

/**
 * Implements hook_block_info().
 */
function cc_interactions_block_info() {
  $blocks['cc_interactions_apps'] = array(
    'info' => t('Interactions for Apps'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cc_interactions_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'cc_interactions_apps':
      $block['subject'] = t('Interactions');
      $block['content'] = cc_interactions_apps_block();
      break;
  }
  return $block;
}

/**
 * Interactions for Apps Block content
 *
 * This should be a theme function (or rather parts).
 */
function cc_interactions_apps_block() {
  $output = '';

  // Ensure we are on a node type Application and get information.
  $node = menu_get_object();
  if (is_object($node) && $node->type == 'application') {
    // List off available interactions types.  We will need
    // field options, the user object with organizations.
    $field = field_info_field('field_interaction_type');
    $values = taxonomy_allowed_values($field);
    
    // Prepopulate format is similar to:
    // http://localhost/Mktplc/node/add/interaction?edit[field_interaction_organization][und][0][nid]=[nid:%209999]
    
    // Create list
    $items = array();
    foreach ($values as $tid => $action) {
      $items[] = l(t('We <strong>@action</strong> @title', array(
        '@action' => $action,
        '@title' => $node->title,
      )), 'node/add/interaction', array(
        'html' => TRUE,
        'query' => array(
          'edit[field_interaction_type][und]' => check_plain($tid),
          'edit[field_interaction_application][und][0][nid]' => 
            check_plain($node->title) . ' [nid: ' . check_plain($node->nid) . ']',
          'compact-overlay' => 'true',
          'destination' => current_path(),
        ),
      ));
    }
    $output .= theme('item_list', array(
      'items' => $items,
    ));
  }
  
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cc_interactions_form_interaction_node_form_alter(&$form, &$form_state, $form_id) {
  
  // Get list of users organizations to send over to JS.
  global $user;
  $current_user = user_load($user->uid);
  $lang = field_language('user', $current_user, 'field_interaction_organization');
  $organizations = array();
  foreach ($current_user->field_interaction_organization[$lang] as $value) {
    $node = node_load($value['nid']);
    $organizations[$value['nid']] = check_plain($node->title);
  }
  $js_data = array(
    'cc_interactions' => array(
      'user_orgs' => $organizations,
    ),
  );
  
  drupal_add_js($js_data, 'setting');
  drupal_add_js(drupal_get_path('module', 'cc_interactions') . '/js/cc_interactions.js', array(
    'weight' => 99999,
  ));
  drupal_add_css(drupal_get_path('module', 'cc_interactions') . '/css/cc_interactions.css');
}

function cc_interactions_node_submit($node, $form, &$form_state) {
  $isorg = $node->type == 'organization';
  $isapp = $node->type == 'application';
  $isproj = $node->type == 'project';
  if(!$isproj && !$isapp && !$isorg) {
    return FALSE;
  }
  $oldnode = node_load($node->nid);
  $fieldname = $isorg ? 'field_organization_apps_created' : (
    $isapp ? 'field_application_creator' : (
      isproj ? 'field_creators' : FALSE
    )
  );
  $intfieldname = $isapp ? 'field_application_interactions' : (
    $isproj ? 'field_project_interactions' : (
      $isorg ? 'field_organization_interactions' : NULL
    )
  );
  $added = _cc_interactions_added($fieldname, $node, $oldnode);
  $nids = array_filter(array_map('_cc_interactions_nid', $added));
  foreach($nids as $nid) {
    $org_id = $isorg ? $node->nid : ($isapp ? $nid : ($isproj ? $nid : FALSE));
    $app_id = $isorg ? $nid : ($isapp ? $node->nid : ($isproj ? NULL : FALSE));
    $proj_id = $isorg ? NULL : ($isapp ? NULL : ($isproj ? $node->nid : FALSE));
    $int = _cc_interactions_created($org_id, $app_id, $proj_id);
    if($int) {
      _cc_interactions_del_created($org_id, $app_id, $proj_id);
      node_save($int);
    }
    $node->{$intfieldname}[$node->language][] = array('nid' => $int->nid);
    node_save($node);
  }
}

//Array of items added to a field of the node. $field - field name, $new - updated node, $old - unchanged node.
function _cc_interactions_added($field, $new, $old = NULL) {
  $newf = field_get_items('node', $new, $field);
  $oldf = $old ? field_get_items('node', $old, $field) : array();
  $added = array();
  foreach($newf as $delta => $item) {
    if(!in_array($item, $oldf)) {
      $added[] = $item;
    }
  }
  return $added;
}

//$item - node reference field item or node object.
function _cc_interactions_nid($item) {
  if (is_array($item)) {
    return isset($item['nid']) ? $item['nid'] : FALSE;
  }
  elseif (is_object($item)) {
    return isset($item->nid) ? $item->nid : FALSE;
  }
}

//Delete interactions of type "Created" from database.
function _cc_interactions_del_created($org_id = 0, $app_id = 0, $proj_id = 0) {
  $q = new EntityFieldQuery();
  $q
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'interaction')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_interaction_type', 'tid', 154, '=');
  if($org_id) {
    $q->fieldCondition('field_interaction_organization', 'nid', $org_id, '=');
  }
  if($app_id) {
    $q->fieldCondition('field_interaction_application', 'nid', $app_id, '=');
  }
  if($proj_id) {
    $q->fieldCondition('field_interaction_project', 'nid', $proj_id, '=');
  }
  $r = $q->execute();
  $nids = array_map('_cc_interactions_nid', isset($r['node']) ? $r['node'] : array());
  node_delete_multiple($nids);
}

//New interaction of type "Created".
function _cc_interactions_created($org_id = 0, $app_id = 0, $proj_id=0) {
  $i = new StdClass();
  $i->type = 'interaction';
  $i->language = LANGUAGE_NONE;
  node_object_prepare($i);
  $i->field_interaction_type[$i->language][0]['tid'] = 154;
  if ($org_id) {
    $i->field_interaction_organization[$i->language][0]['nid'] = $org_id;
  }
  if ($app_id) {
    $i->field_interaction_application[$i->language][0]['nid'] = $app_id;
  }
  if ($proj_id) {
    $i->field_interaction_project[$i->language][0]['nid'] = $proj_id;
  }
  return $i;
}