<?php
/**
 * @file
 * The main module file for CC Interactions.
 *
 * This module aims to make the creation of Interactions,
 * a content type that ties together Apps and Organizations,
 * easier to create from either of the respective content
 * types.
 *
 * Note that the first iteration of this may be
 * pretty hackish.  Apologies up front.
 */

/**
 * Implements hook_block_info().
 */
function cc_interactions_block_info() {
  $blocks['cc_interactions_apps'] = array(
    'info' => t('Interactions for Apps'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cc_interactions_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'cc_interactions_apps':
      $block['subject'] = t('Interactions');
      $block['content'] = cc_interactions_apps_block();
      break;
  }
  return $block;
}

/**
 * Interactions for Apps Block content
 *
 * This should be a theme function (or rather parts).
 */
function cc_interactions_apps_block() {
  $output = '';

  // Ensure we are on a node type Application and get information.
  $node = menu_get_object();
  if (is_object($node) && $node->type == 'application') {
    // List off available interactions types.  We will need
    // field options, the user object with organizations.
    $field = field_info_field('field_interaction_type');
    $values = taxonomy_allowed_values($field);
    
    // Prepopulate format is similar to:
    // http://localhost/Mktplc/node/add/interaction?edit[field_interaction_organization][und][0][nid]=[nid:%209999]
    
    // Create list
    $items = array();
    foreach ($values as $tid => $action) {
      $items[] = l(t('We <strong>@action</strong> @title', array(
        '@action' => $action,
        '@title' => $node->title,
      )), 'node/add/interaction', array(
        'html' => TRUE,
        'query' => array(
          'edit[field_interaction_type][und]' => check_plain($tid),
          'edit[field_interaction_application][und][0][nid]' => 
            check_plain($node->title) . ' [nid: ' . check_plain($node->nid) . ']',
        ),
      ));
    }
    $output .= theme('item_list', array(
      'items' => $items,
    ));
  }
  
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cc_interactions_form_interaction_node_form_alter(&$form, &$form_state, $form_id) {
  
  // Get list of users organizations to send over to JS.
  global $user;
  $current_user = user_load($user->uid);
  $lang = field_language('user', $current_user, 'field_interaction_organization');
  $organizations = array();
  foreach ($current_user->field_interaction_organization[$lang] as $value) {
    $node = node_load($value['nid']);
    $organizations[$value['nid']] = check_plain($node->title);
  }
  $js_data = array(
    'cc_interactions' => array(
      'user_orgs' => $organizations,
    ),
  );
  
  drupal_add_js($js_data, 'setting');
  drupal_add_js(drupal_get_path('module', 'cc_interactions') . '/js/cc_interactions.js', array(
    'weight' => 99999,
  ));
  drupal_add_css(drupal_get_path('module', 'cc_interactions') . '/css/cc_interactions.css');
}