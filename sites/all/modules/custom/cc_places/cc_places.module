<?php

function cc_places_views_pre_render(&$view) {
	if($view->name == 'cc_organizations' && $view->current_display == 'block') {
	$v = views_get_view('cc_organizations');
	$v->set_display('openlayers_1');
	$v->execute();
	$c = count($v->result);
	if(isset($view->build_info['title'])) {
		$view->build_info['title'] .=
			!empty($c)
			? ' (' . $c . ')'
			: '';
	}
	}
	
}

function cc_places_menu(){
	$items['cc/places/%/%'] = array(
		'title' => 'Single place',
		'page callback' => '_cc_places_place_page',
		'page arguments' => array(1, 2),
		'access arguments' => 'access content'
	);
	return $items;
}

function _cc_places_place_page($place_type = 'city', $place = 'test'){
	
	$geometry = geocode('google',  $place, 'point');
	dpm($geometry);
	$geo_array = geofield_get_values_from_geometry($geometry);
	dpm($geo_array);
	$place_wkt = $geo_array['wkt'];
	dpm($place_wkt);
	$map_preset = openlayers_preset_load('cc_places_map');
	dpm($map_preset);
	$output = openlayers_render_map($map_preset->data, $map_preset->name);
	return $output;
}

function _cc_places_wkt($place, $wkt_type = 'point'){
	if($place){
		$query = db_select('zipcodes', 'z')
			->fields('z', array('latitude', 'longitude'))
			->condition('city', $place, '=');
		$r = $query->execute()->fetchAssoc();
		if(isset($r['latitude']) && isset($r['longitude'])) {
			return 
				'POINT ('
				. $r['longitude']
				. ' '
				. $r['latitude']
				. ')';
		}
		return FALSE;
/*		$geometry = geocode('google', $place, $wkt_type);
		$geo_array = geofield_get_values_from_geometry($geometry);
		return $geo_array['wkt'];*/
	}
	return FALSE;
}

// Function to validate place received from URL against existing places in the system.
function _cc_places_validate_place($place, $place_type = 'locality', $node_type = 'organization', $field_name = 'field_organization_address'){
	$query = new EntityFieldQuery();
	$entities = $query->entityCondition('entity_type', 'node')
						->entityCondition('bundle', $node_type)
						->fieldCondition($field_name, $place_type, $place)
						->propertyCondition('status', 1)
						->execute();
	
	if($entities){
		return TRUE;
	}
	
	return FALSE;
}

function _cc_places_address_by_nid($nid, $city = TRUE, $state = TRUE, $country = TRUE){
	//TODO: add addressfield module check

	$result = db_select('field_data_field_organization_address', 'addr')
		->fields('addr')
		->condition('entity_id', $nid, '=')
		->execute()
		->fetchAssoc();
	
	if(empty($result)){
		return FALSE;
	}
	
	//dpm($result);
	
	if($city && !empty($result['field_organization_address_locality'])){
		$address['city'] = $result['field_organization_address_locality'];
	}
	if($state && !empty($result['field_organization_address_administrative_area'])){
		$address['state'] = $result['field_organization_address_administrative_area'];
	}
	if($country && !empty($result['field_organization_address_administrative_area'])){
		$address['country'] = $result['field_organization_address_country'];
	}
	
	$address['full'] = '';
	$address['full'] .= $address['city'] ? $address['city'] : '';
	$address['full'] .= $address['state'] ? ', '. $address['state'] : '';
	$address['full'] .= $address['country'] ? ', '. $address['country'] : '';
	
	return $address;
}
