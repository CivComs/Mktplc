<?php
/**
 * @file
 * Main module file for the CC Activity module.
 * 
 * Custom module that pulls together activity 
 * from the internet into content for the site.
 */

/**
 * Implements hook_help().
 */
function cc_activity_help($path, $arg) {
  switch ($path) {
    // Main module help for the CC Activity module
    case 'admin/help#cc_activity':
      return '<p>' . t('Custom module that pulls together activity from the internet into content for the site.') . '</p>';
  
  }
}

/**
 * Implements hook_block_info().
 */
function cc_activity_block_info() {
  $blocks['cc_activity_press'] = array(
    'info' => t('Press Highlights for Home Page'),
  );
  $blocks['cc_activity_recent'] = array(
    'info' => t('Recent Internet Activity'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cc_activity_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'cc_activity_press':
      $block['subject'] = t('Civic Commons in the Press');
      $block['content'] = array(
        '#theme' => 'cc_activity_press_block',
      );
      break;
      
    case 'cc_activity_recent':
      $block['subject'] = t('Recent Activity');
      $block['content'] = array(
        '#theme' => 'cc_activity_recent_block',
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function cc_activity_theme($existing, $type, $theme, $path) {
  return array(
    'cc_activity_press_block' => array(
      'variables' => array(
      ),
    ),
    'cc_activity_recent_block' => array(
      'variables' => array(
      ),
    ),
  );
}

/**
 * Theme function for Press Activity block
 */
function theme_cc_activity_press_block($vars) {
  $output = '';
  
  // Add CSS
  drupal_add_css(drupal_get_path('module', 'cc_activity') . '/cc_activity.css');
  
  // Press items
  $items = array();
  $items[] = array(
    'image' => 'press-frontpage-wsj.png',
    'url' => 'http://blogs.wsj.com/digits/2011/05/27/app-watch-this-app-could-save-your-life/',
    'track' => 'http://blogs.wsj.com',
  );
  $items[] = array(
    'image' => 'press-frontpage-mashable.png',
    'url' => 'http://mashable.com/2011/03/31/government-it-dashboard/',
    'track' => 'http://mashable.com',
  );
  $items[] = array(
    'image' => 'press-frontpage-radar.png',
    'url' => 'http://radar.oreilly.com/m/2011/03/white-house-it-dashboard-open-source.html',
    'track' => 'http://radar.oreilly.com',
  );
  $items[] = array(
    'image' => 'press-frontpage-governing.png',
    'url' => 'http://governingpeople.com/jefferysmith/21563/code-america-federal-government-release-federal-it-dashboard-public-use',
    'track' => 'http://governingpeople.com',
  );
  $items[] = array(
    'image' => 'press-frontpage-wired.png',
    'url' => 'http://www.wired.com/magazine/2010/11/ff_311_new_york/',
    'track' => 'http://www.wired.com',
  );
  
  // Render items
  $output .= '<div class="cc-activity-press-block">';
  $onlick = "javascript:_gaq.push(['_trackEvent', 'outbound-article', '%s']);";
  $imgpath = drupal_get_path('module', 'cc_activity') . '/img/';
  foreach ($items as $k => $i) {
    $output .=  '
      <span class="cc-activity-press-block-item">
        ' . l(
          theme('image', array('path' => $imgpath . $i['image'])),
          $i['url'],
          array(
            'html' => TRUE,
            'attributes' => array(
              'onclick' =>  sprintf($onclick, $i['track']),
            ),
          )) . '
      </span>
    ';
  }
  $output .= '</div>';
  
  return $output;
}

/**
 * Theme function for Press Activity block
 */
function theme_cc_activity_recent_block($vars) {
  $output = '';
  $meta = cc_activity_feed_meta();
  
  // Add CSS
  drupal_add_css(drupal_get_path('module', 'cc_activity') . '/cc_activity.css');
  
  // Vertical tabs stuff
  drupal_add_js('misc/vertical-tabs.js');
  drupal_add_css('misc/vertical-tabs.css');
  
  // Get the latest activity
  $activities = array();
  $result = db_query("SELECT * FROM {cc_activity} WHERE type != '' ORDER BY type ASC, id ASC");
  foreach ($result as $record) {
    $activities[$record->type][] = $record;
  }
  
  // If no content, don't display the block.
  if (empty($activities)) {
    return $output;
  }

  // Create output
  $output .= '<div class="cc-activity-recent vertical-tabs-panes">';
  foreach ($activities as $t => $type) {
    $output .= '
      <fieldset>
        <legend>' . $meta[$t]['name'] . '</legend>
        <div class="cc-activity-recent-' . $t . '-container">
          <h2>' . t('From !link', array('!link' => l($meta[$t]['name'], $meta[$t]['name_url']))) . '</h2>
    ';
    
    $count = 0;
    foreach ($type as $k => $a) {
      $count++;
      if ($count <= $meta[$t]['display']) {
        // Strip tags, if needed
        $a->content = ($meta[$t]['strip_tags']) ? strip_tags(html_entity_decode($a->content)) : $a->content;
        $output .= '
          <div class="cc-activity-recent-item cc-activity-recent-item-' . $a->id . '">
            <h3>' . l($a->title, $a->original_url) . '</h3>
            <div class="cc-activity-recent-item' . $a->id . '-description">
              ' . filter_xss_admin($a->content) . '
            </div>
          </div>
        ';
      }
    }
    $output .= '
        </div>
      </fieldset>
    ';
  }
  
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_entity_info().
 */
function cc_activity_entity_info() {
  return array(
    'cc_activity' => array(
      'label' => t('CC Activity'),
      'plural label' => t('CC Activities'),
      'description' => t('Activities around the internets concerning CC.'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'cc_activity',
      'access callback' => 'cc_activity_entity_access',
      'module' => 'profile2',
      'entity keys' => array(
        'id' => 'id',
      ),
      'fieldable' => TRUE,
      'admin ui' => array(
        'path' => 'admin/structure/cc_activity',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
}

/**
 * Access callback for the entity API.
 */
function cc_activity_entity_access($op, $type = NULL, $account = NULL) {
  return user_access('administer site configuration', $account);
}

/**
 * Loads a CC ACtivity object
 */
function cc_activity_load($id) {
  return entity_load_single('cc_activity', $id);
}

/**
 * Deletes a CC ACtivity object
 */
function cc_activity_save($activity) {
  return entity_save('cc_activity', $activity);
}

/**
 * Deletes a CC ACtivity object
 */
function cc_activity_delete($id) {
  return entity_delete('cc_activity', $id);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function cc_activity_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_feeds_plugins().
 */
function cc_activity_feeds_plugins() {
  $info = array();
  $info['FeedsActivityProcessor'] = array(
    'name' => 'Activity processor',
    'description' => 'Processes data into the activity data table.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'FeedsActivityProcessor',
      'file' => 'FeedsActivityProcessor.inc',
      'path' => drupal_get_path('module', 'cc_activity') . '/plugins',
    ),
  );
  return $info; 
}

/**
 * Implements hook_cron().
 */
function cc_activity_cron() {
  // Update the cc_activity table with a more meaningful type
  // as this is no possible to set with Feeds.
  $meta = cc_activity_feed_meta();
  foreach ($meta as $m => $type) {
    $count = db_update('cc_activity')
      ->fields(array(
        'type' => $type['type'],
      ))
      ->condition('type', '')
      ->condition('original_url', '%' . $type['search_url'] . '%', 'LIKE')
      ->execute();
  }
}

/**
 * Define the sources and categories of feeds for CC.
 */
function cc_activity_feed_meta() {
  return array(
    'tumblr' => array(
      'name' => t('Tumblr'),
      'name_url' => 'http://civiccommons.tumblr.com/',
      'type' => 'tumblr',
      'search_url' => 'tumblr.com',
      'feed' => 'http://civiccommons.tumblr.com/rss',
      'display' => 3,
    ),
    'open311' => array(
      'name' => t('Open311 Blog'),
      'name_url' => 'http://open311.org/',
      'type' => 'open311',
      'search_url' => 'open311.org',
      'feed' => 'http://open311.org/blog/feed/rss/',
      'display' => 8,
    ),
    'cc_discuss' => array(
      'name' => t('Discussion Group'),
      'name_url' => 'http://groups.google.com/a/civiccommons.org/group/discuss',
      'type' => 'cc_discuss',
      'search_url' => 'groups.google.com/a/civiccommons.org',
      'feed' => 'http://groups.google.com/a/civiccommons.org/group/discuss/feed/rss_v2_0_topics.xml',
      'display' => 8,
    ),
    'cc_wiki' => array(
      'name' => t('Wiki'),
      'name_url' => 'http://wiki.civiccommons.org/',
      'type' => 'cc_wiki',
      'search_url' => 'wiki.civiccommons',
      'feed' => 'http://wiki.civiccommons.org/index.php?namespace=0&title=Special%3ARecentChanges&feed=rss',
      'display' => 8,
      'strip_tags' => TRUE,
    ),
    'twitter' => array(
      'name' => t('Twitter'),
      'name_url' => 'http://twitter.com/civcoms',
      'type' => 'twitter',
      'search_url' => 'twitter.com',
      'feed' => 'http://search.twitter.com/search.rss?q=CivComs&include_entities=true&result_type=mixed',
      'display' => 8,
    ),
    'cc_blog' => array(
      'name' => t('Blog'),
      'name_url' => 'http://blog.civiccommons.org',
      'type' => 'cc_blog',
      'search_url' => 'blog.civiccommons.org',
      'feed' => 'http://blog.civiccommons.org/feed/rss/',
      'display' => 7,
    ),
  );
}